// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rangedbpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RangeDBClient is the client API for RangeDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RangeDBClient interface {
	Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (RangeDB_EventsClient, error)
	EventsByAggregateType(ctx context.Context, in *EventsByAggregateTypeRequest, opts ...grpc.CallOption) (RangeDB_EventsByAggregateTypeClient, error)
	EventsByStream(ctx context.Context, in *EventsByStreamRequest, opts ...grpc.CallOption) (RangeDB_EventsByStreamClient, error)
	OptimisticDeleteStream(ctx context.Context, in *OptimisticDeleteStreamRequest, opts ...grpc.CallOption) (*OptimisticDeleteStreamResponse, error)
	OptimisticSave(ctx context.Context, in *OptimisticSaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error)
	SubscribeToLiveEvents(ctx context.Context, in *SubscribeToLiveEventsRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToLiveEventsClient, error)
	SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToEventsClient, error)
	SubscribeToEventsByAggregateType(ctx context.Context, in *SubscribeToEventsByAggregateTypeRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToEventsByAggregateTypeClient, error)
	TotalEventsInStream(ctx context.Context, in *TotalEventsInStreamRequest, opts ...grpc.CallOption) (*TotalEventsInStreamResponse, error)
}

type rangeDBClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeDBClient(cc grpc.ClientConnInterface) RangeDBClient {
	return &rangeDBClient{cc}
}

func (c *rangeDBClient) Events(ctx context.Context, in *EventsRequest, opts ...grpc.CallOption) (RangeDB_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RangeDB_ServiceDesc.Streams[0], "/rangedbpb.RangeDB/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_EventsClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBEventsClient struct {
	grpc.ClientStream
}

func (x *rangeDBEventsClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) EventsByAggregateType(ctx context.Context, in *EventsByAggregateTypeRequest, opts ...grpc.CallOption) (RangeDB_EventsByAggregateTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RangeDB_ServiceDesc.Streams[1], "/rangedbpb.RangeDB/EventsByAggregateType", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBEventsByAggregateTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_EventsByAggregateTypeClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBEventsByAggregateTypeClient struct {
	grpc.ClientStream
}

func (x *rangeDBEventsByAggregateTypeClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) EventsByStream(ctx context.Context, in *EventsByStreamRequest, opts ...grpc.CallOption) (RangeDB_EventsByStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RangeDB_ServiceDesc.Streams[2], "/rangedbpb.RangeDB/EventsByStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBEventsByStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_EventsByStreamClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBEventsByStreamClient struct {
	grpc.ClientStream
}

func (x *rangeDBEventsByStreamClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) OptimisticDeleteStream(ctx context.Context, in *OptimisticDeleteStreamRequest, opts ...grpc.CallOption) (*OptimisticDeleteStreamResponse, error) {
	out := new(OptimisticDeleteStreamResponse)
	err := c.cc.Invoke(ctx, "/rangedbpb.RangeDB/OptimisticDeleteStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rangeDBClient) OptimisticSave(ctx context.Context, in *OptimisticSaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, "/rangedbpb.RangeDB/OptimisticSave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rangeDBClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveResponse, error) {
	out := new(SaveResponse)
	err := c.cc.Invoke(ctx, "/rangedbpb.RangeDB/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rangeDBClient) SubscribeToLiveEvents(ctx context.Context, in *SubscribeToLiveEventsRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToLiveEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RangeDB_ServiceDesc.Streams[3], "/rangedbpb.RangeDB/SubscribeToLiveEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBSubscribeToLiveEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_SubscribeToLiveEventsClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBSubscribeToLiveEventsClient struct {
	grpc.ClientStream
}

func (x *rangeDBSubscribeToLiveEventsClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RangeDB_ServiceDesc.Streams[4], "/rangedbpb.RangeDB/SubscribeToEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBSubscribeToEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_SubscribeToEventsClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBSubscribeToEventsClient struct {
	grpc.ClientStream
}

func (x *rangeDBSubscribeToEventsClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) SubscribeToEventsByAggregateType(ctx context.Context, in *SubscribeToEventsByAggregateTypeRequest, opts ...grpc.CallOption) (RangeDB_SubscribeToEventsByAggregateTypeClient, error) {
	stream, err := c.cc.NewStream(ctx, &RangeDB_ServiceDesc.Streams[5], "/rangedbpb.RangeDB/SubscribeToEventsByAggregateType", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeDBSubscribeToEventsByAggregateTypeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeDB_SubscribeToEventsByAggregateTypeClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type rangeDBSubscribeToEventsByAggregateTypeClient struct {
	grpc.ClientStream
}

func (x *rangeDBSubscribeToEventsByAggregateTypeClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rangeDBClient) TotalEventsInStream(ctx context.Context, in *TotalEventsInStreamRequest, opts ...grpc.CallOption) (*TotalEventsInStreamResponse, error) {
	out := new(TotalEventsInStreamResponse)
	err := c.cc.Invoke(ctx, "/rangedbpb.RangeDB/TotalEventsInStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RangeDBServer is the server API for RangeDB service.
// All implementations must embed UnimplementedRangeDBServer
// for forward compatibility
type RangeDBServer interface {
	Events(*EventsRequest, RangeDB_EventsServer) error
	EventsByAggregateType(*EventsByAggregateTypeRequest, RangeDB_EventsByAggregateTypeServer) error
	EventsByStream(*EventsByStreamRequest, RangeDB_EventsByStreamServer) error
	OptimisticDeleteStream(context.Context, *OptimisticDeleteStreamRequest) (*OptimisticDeleteStreamResponse, error)
	OptimisticSave(context.Context, *OptimisticSaveRequest) (*SaveResponse, error)
	Save(context.Context, *SaveRequest) (*SaveResponse, error)
	SubscribeToLiveEvents(*SubscribeToLiveEventsRequest, RangeDB_SubscribeToLiveEventsServer) error
	SubscribeToEvents(*SubscribeToEventsRequest, RangeDB_SubscribeToEventsServer) error
	SubscribeToEventsByAggregateType(*SubscribeToEventsByAggregateTypeRequest, RangeDB_SubscribeToEventsByAggregateTypeServer) error
	TotalEventsInStream(context.Context, *TotalEventsInStreamRequest) (*TotalEventsInStreamResponse, error)
	mustEmbedUnimplementedRangeDBServer()
}

// UnimplementedRangeDBServer must be embedded to have forward compatible implementations.
type UnimplementedRangeDBServer struct {
}

func (UnimplementedRangeDBServer) Events(*EventsRequest, RangeDB_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (UnimplementedRangeDBServer) EventsByAggregateType(*EventsByAggregateTypeRequest, RangeDB_EventsByAggregateTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsByAggregateType not implemented")
}
func (UnimplementedRangeDBServer) EventsByStream(*EventsByStreamRequest, RangeDB_EventsByStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsByStream not implemented")
}
func (UnimplementedRangeDBServer) OptimisticDeleteStream(context.Context, *OptimisticDeleteStreamRequest) (*OptimisticDeleteStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimisticDeleteStream not implemented")
}
func (UnimplementedRangeDBServer) OptimisticSave(context.Context, *OptimisticSaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptimisticSave not implemented")
}
func (UnimplementedRangeDBServer) Save(context.Context, *SaveRequest) (*SaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedRangeDBServer) SubscribeToLiveEvents(*SubscribeToLiveEventsRequest, RangeDB_SubscribeToLiveEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLiveEvents not implemented")
}
func (UnimplementedRangeDBServer) SubscribeToEvents(*SubscribeToEventsRequest, RangeDB_SubscribeToEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}
func (UnimplementedRangeDBServer) SubscribeToEventsByAggregateType(*SubscribeToEventsByAggregateTypeRequest, RangeDB_SubscribeToEventsByAggregateTypeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEventsByAggregateType not implemented")
}
func (UnimplementedRangeDBServer) TotalEventsInStream(context.Context, *TotalEventsInStreamRequest) (*TotalEventsInStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalEventsInStream not implemented")
}
func (UnimplementedRangeDBServer) mustEmbedUnimplementedRangeDBServer() {}

// UnsafeRangeDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RangeDBServer will
// result in compilation errors.
type UnsafeRangeDBServer interface {
	mustEmbedUnimplementedRangeDBServer()
}

func RegisterRangeDBServer(s grpc.ServiceRegistrar, srv RangeDBServer) {
	s.RegisterService(&RangeDB_ServiceDesc, srv)
}

func _RangeDB_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).Events(m, &rangeDBEventsServer{stream})
}

type RangeDB_EventsServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBEventsServer struct {
	grpc.ServerStream
}

func (x *rangeDBEventsServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_EventsByAggregateType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsByAggregateTypeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).EventsByAggregateType(m, &rangeDBEventsByAggregateTypeServer{stream})
}

type RangeDB_EventsByAggregateTypeServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBEventsByAggregateTypeServer struct {
	grpc.ServerStream
}

func (x *rangeDBEventsByAggregateTypeServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_EventsByStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventsByStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).EventsByStream(m, &rangeDBEventsByStreamServer{stream})
}

type RangeDB_EventsByStreamServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBEventsByStreamServer struct {
	grpc.ServerStream
}

func (x *rangeDBEventsByStreamServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_OptimisticDeleteStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimisticDeleteStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeDBServer).OptimisticDeleteStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rangedbpb.RangeDB/OptimisticDeleteStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeDBServer).OptimisticDeleteStream(ctx, req.(*OptimisticDeleteStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RangeDB_OptimisticSave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptimisticSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeDBServer).OptimisticSave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rangedbpb.RangeDB/OptimisticSave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeDBServer).OptimisticSave(ctx, req.(*OptimisticSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RangeDB_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeDBServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rangedbpb.RangeDB/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeDBServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RangeDB_SubscribeToLiveEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToLiveEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).SubscribeToLiveEvents(m, &rangeDBSubscribeToLiveEventsServer{stream})
}

type RangeDB_SubscribeToLiveEventsServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBSubscribeToLiveEventsServer struct {
	grpc.ServerStream
}

func (x *rangeDBSubscribeToLiveEventsServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).SubscribeToEvents(m, &rangeDBSubscribeToEventsServer{stream})
}

type RangeDB_SubscribeToEventsServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBSubscribeToEventsServer struct {
	grpc.ServerStream
}

func (x *rangeDBSubscribeToEventsServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_SubscribeToEventsByAggregateType_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToEventsByAggregateTypeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeDBServer).SubscribeToEventsByAggregateType(m, &rangeDBSubscribeToEventsByAggregateTypeServer{stream})
}

type RangeDB_SubscribeToEventsByAggregateTypeServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type rangeDBSubscribeToEventsByAggregateTypeServer struct {
	grpc.ServerStream
}

func (x *rangeDBSubscribeToEventsByAggregateTypeServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _RangeDB_TotalEventsInStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalEventsInStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RangeDBServer).TotalEventsInStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rangedbpb.RangeDB/TotalEventsInStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RangeDBServer).TotalEventsInStream(ctx, req.(*TotalEventsInStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RangeDB_ServiceDesc is the grpc.ServiceDesc for RangeDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RangeDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rangedbpb.RangeDB",
	HandlerType: (*RangeDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OptimisticDeleteStream",
			Handler:    _RangeDB_OptimisticDeleteStream_Handler,
		},
		{
			MethodName: "OptimisticSave",
			Handler:    _RangeDB_OptimisticSave_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _RangeDB_Save_Handler,
		},
		{
			MethodName: "TotalEventsInStream",
			Handler:    _RangeDB_TotalEventsInStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _RangeDB_Events_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventsByAggregateType",
			Handler:       _RangeDB_EventsByAggregateType_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventsByStream",
			Handler:       _RangeDB_EventsByStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLiveEvents",
			Handler:       _RangeDB_SubscribeToLiveEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _RangeDB_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToEventsByAggregateType",
			Handler:       _RangeDB_SubscribeToEventsByAggregateType_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rangedb.proto",
}
