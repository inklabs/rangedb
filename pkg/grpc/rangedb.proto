syntax = "proto3";

package rangedbpb;

option go_package = ".;rangedbpb";

service RangeDB {
  rpc Events(EventsRequest) returns (stream Record) {}
  rpc EventsByAggregateType(EventsByAggregateTypeRequest) returns (stream Record) {}
  rpc EventsByStream(EventsByStreamRequest) returns (stream Record) {}
  rpc OptimisticDeleteStream(OptimisticDeleteStreamRequest) returns (OptimisticDeleteStreamResponse) {}
  rpc OptimisticSave(OptimisticSaveRequest) returns (SaveResponse) {}
  rpc Save(SaveRequest) returns (SaveResponse) {}
  rpc SubscribeToLiveEvents(SubscribeToLiveEventsRequest) returns (stream Record) {}
  rpc SubscribeToEvents(SubscribeToEventsRequest) returns (stream Record) {}
  rpc SubscribeToEventsByAggregateType(SubscribeToEventsByAggregateTypeRequest) returns (stream Record) {}
  rpc TotalEventsInStream(TotalEventsInStreamRequest) returns (TotalEventsInStreamResponse) {}
}

message EventsRequest {
  uint64 globalSequenceNumber = 1;
}

message EventsByStreamRequest {
  string streamName = 1;
  uint64 streamSequenceNumber = 2;
}

message EventsByAggregateTypeRequest {
  repeated string aggregateTypes = 1;
  uint64 globalSequenceNumber = 2;
}

message SubscribeToLiveEventsRequest {}

message SubscribeToEventsRequest {
  uint64 globalSequenceNumber = 1;
}

message SubscribeToEventsByAggregateTypeRequest {
  repeated string aggregateTypes = 1;
  uint64 globalSequenceNumber = 2;
}

message OptimisticDeleteStreamRequest {
  uint64 ExpectedStreamSequenceNumber = 1;
  string StreamName = 2;
}

message OptimisticDeleteStreamResponse {
  uint32 EventsDeleted = 1;
}

message OptimisticSaveRequest {
  uint64 ExpectedStreamSequenceNumber = 1;
  string AggregateType = 2;
  string AggregateID = 3;
  repeated Event Events = 4;
}

message SaveRequest {
  string AggregateType = 1;
  string AggregateID = 2;
  repeated Event Events = 3;
}

message SaveResponse {
  uint32 EventsSaved = 1;
  uint64 LastStreamSequenceNumber = 2;
}

message SaveFailureResponse {
  string Message = 1;
}

message TotalEventsInStreamRequest {
  string StreamName = 1;
}

message TotalEventsInStreamResponse {
  uint64 TotalEvents = 1;
}

message Event {
  string Type = 1;
  string Data = 2;
  string Metadata = 3;
}

message Record {
  string AggregateType = 1;
  string AggregateID = 2;
  uint64 GlobalSequenceNumber = 3;
  uint64 StreamSequenceNumber = 4;
  uint64 InsertTimestamp = 5;
  string EventID = 6;
  string EventType = 7;
  string Data = 8;
  string Metadata = 9;
}
