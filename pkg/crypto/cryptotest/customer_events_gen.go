// Code generated by go generate; DO NOT EDIT.
// This file was generated at
// 2021-05-25 15:20:30.406811 -0700 PDT m=+0.004297604
package cryptotest

import (
	"strconv"

	"github.com/inklabs/rangedb/pkg/crypto"
)

func (e CustomerSignedUp) AggregateID() string   { return e.ID }
func (e CustomerSignedUp) AggregateType() string { return "customer" }
func (e CustomerSignedUp) EventType() string     { return "CustomerSignedUp" }
func (e *CustomerSignedUp) Encrypt(encryptor crypto.Encryptor) error {
	name, err := encryptor.Encrypt(e.ID, e.Name)
	if err != nil {
		if err == crypto.ErrKeyWasDeleted {
			e.RedactPersonalData("")
		}
		return err
	}

	email, err := encryptor.Encrypt(e.ID, e.Email)
	if err != nil {
		if err == crypto.ErrKeyWasDeleted {
			e.RedactPersonalData("")
		}
		return err
	}

	e.Name = name
	e.Email = email
	return nil
}
func (e *CustomerSignedUp) Decrypt(encryptor crypto.Encryptor) error {
	name, err := encryptor.Decrypt(e.ID, e.Name)
	if err != nil {
		if err == crypto.ErrKeyWasDeleted {
			e.RedactPersonalData("")
		}
		return err
	}

	email, err := encryptor.Decrypt(e.ID, e.Email)
	if err != nil {
		if err == crypto.ErrKeyWasDeleted {
			e.RedactPersonalData("")
		}
		return err
	}

	e.Name = name
	e.Email = email
	return nil
}
func (e *CustomerSignedUp) RedactPersonalData(redactTo string) {
	e.Name = redactTo
	e.Email = redactTo
}

func (e CustomerAddedBirth) AggregateID() string   { return e.ID }
func (e CustomerAddedBirth) AggregateType() string { return "customer" }
func (e CustomerAddedBirth) EventType() string     { return "CustomerAddedBirth" }
func (e *CustomerAddedBirth) Encrypt(encryptor crypto.Encryptor) error {
	stringBirthMonth := strconv.Itoa(e.BirthMonth)
	birthMonthEncrypted, err := encryptor.Encrypt(e.ID, stringBirthMonth)
	if err != nil {
		if err == crypto.ErrKeyWasDeleted {
			e.RedactPersonalData("")
		}
		return err
	}

	stringBirthYear := strconv.Itoa(e.BirthYear)
	birthYearEncrypted, err := encryptor.Encrypt(e.ID, stringBirthYear)
	if err != nil {
		if err == crypto.ErrKeyWasDeleted {
			e.RedactPersonalData("")
		}
		return err
	}

	e.BirthMonth = 0
	e.BirthYear = 0
	e.BirthMonthEncrypted = birthMonthEncrypted
	e.BirthYearEncrypted = birthYearEncrypted
	return nil
}
func (e *CustomerAddedBirth) Decrypt(encryptor crypto.Encryptor) error {
	decryptedBirthMonth, err := encryptor.Decrypt(e.ID, e.BirthMonthEncrypted)
	if err != nil {
		if err == crypto.ErrKeyWasDeleted {
			e.RedactPersonalData("")
		}
		return err
	}
	birthMonth, err := strconv.Atoi(decryptedBirthMonth)
	if err != nil {
		return err
	}

	decryptedBirthYear, err := encryptor.Decrypt(e.ID, e.BirthYearEncrypted)
	if err != nil {
		if err == crypto.ErrKeyWasDeleted {
			e.RedactPersonalData("")
		}
		return err
	}
	birthYear, err := strconv.Atoi(decryptedBirthYear)
	if err != nil {
		return err
	}

	e.BirthMonth = birthMonth
	e.BirthYear = birthYear
	e.BirthMonthEncrypted = ""
	e.BirthYearEncrypted = ""
	return nil
}
func (e *CustomerAddedBirth) RedactPersonalData(redactTo string) {
	e.BirthMonth = 0
	e.BirthYear = 0
}
