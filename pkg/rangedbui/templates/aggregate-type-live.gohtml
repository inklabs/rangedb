{{- /*gotype: github.com/inklabs/rangedb/pkg/rangedbui.streamTemplateVars*/ -}}

{{template "base" .}}
{{define "pageTitle"}}{{.AggregateTypeInfo.Name}}{{end}}
{{define "extraHead" }}
    <script src="/static/js/vue-3.2.20.global.prod.js"></script>
{{end}}

{{define "content"}}
<div class="grid-container">
    <div class="grid-x grid-padding-x">
        <div class="cell medium-12 medium-order-1" id="app">
            <nav aria-label="You are here:" role="navigation">
                <ul class="breadcrumbs">
                    <li><a href="/aggregate-types/live">Aggregate</a></li>
                    <li><a href="/a/{{.AggregateTypeInfo.Name}}">{{.AggregateTypeInfo.Name}}</a></li>
                    <li>
                        Realtime (${ Number(totalEvents).toLocaleString() })
                    </li>
                </ul>
            </nav>

            <table class="records">
                <thead>
                <tr>
                    <th title="Global Sequence Number">GSN</th>
                    <th title="Stream Sequence Number">SSN</th>
                    <th>Event Type</th>
                    <th>Aggregate Type</th>
                    <th>Stream</th>
                    <th>Insert Date</th>
                    <th>Data</th>
                </tr>
                </thead>
                <tbody>
                <tr v-for="record in records" :key="record.globalSequenceNumber">
                    <td>${record.globalSequenceNumber}</td>
                    <td>${record.streamSequenceNumber}</td>
                    <td>${record.eventType}</td>
                    <td><a :href="'/a/' + record.aggregateType + '/live'">${record.aggregateType}</a></td>
                    <td><a :href="'/s/' + record.streamName">${record.streamName}</a></td>
                    <td class="date">${formatDate(record.insertTimestamp)}</td>
                    <td class="event-data">${record.data}</td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>
{{end}}

{{define "extraEndBody"}}
<script>
    const maxRecords = 10;
    const App = {
        data() {
            return {
                records: [],
                wasDisconnected: false,
                totalEvents: {{.AggregateTypeInfo.TotalEvents}}
            }
        },
        mounted() {
            this.connect();
        },
        methods: {
            formatDate(timestamp) {
                const date = new Date(timestamp * 1000);
                return new Intl.DateTimeFormat('default', {dateStyle: 'medium', timeStyle: 'long'}).format(date);
            },
            connect() {
                let ws = new WebSocket('ws://{{.UIHost}}/live/a/{{.AggregateTypeInfo.Name}}');
                ws.onmessage = (event) => {
                    if (this.wasDisconnected) {
                        this.records = [];
                        this.wasDisconnected = false;
                    }
                    let envelope = JSON.parse(event.data);
                    this.totalEvents = envelope.TotalEvents;
                    this.records.unshift(envelope.Record);
                    if (this.records.length > maxRecords) {
                        this.records.pop()
                    }
                };

                ws.onopen = () => {
                    console.log("Socket connected.")
                };

                ws.onclose = (e) => {
                    console.log("Socket is closed. Reconnect in 1 second", e.reason)
                    this.wasDisconnected = true;
                    setTimeout((scope) => {
                        scope.connect();
                    }, 1000, this)
                };

                ws.onerror = function(err) {
                    console.error('Socket encountered error: ', err.message, 'Closing socket');
                    ws.close();
                };
            }
        },
        compilerOptions: {
            delimiters: ["${", "}"]
        }
    }
    Vue.createApp(App).mount("#app")
</script>
{{end}}
